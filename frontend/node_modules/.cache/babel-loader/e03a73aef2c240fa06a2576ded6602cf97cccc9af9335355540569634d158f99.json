{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/news';\nexport const getNews = async (showAll = false) => {\n  try {\n    const response = await axios.get(`${API_URL}${showAll ? '?all=true' : ''}`);\n    return response.data || [];\n  } catch (error) {\n    console.error('Error fetching news:', error);\n    return [];\n  }\n};\nexport const createNews = async newsData => {\n  console.log('createNews вызван с данными:', newsData);\n\n  // Явно указываем заголовки для корректной обработки JSON\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const response = await axios.post(API_URL, newsData, config);\n    console.log('Результат запроса:', response.data);\n    return response;\n  } catch (error) {\n    console.error('Ошибка создания новости в API:', error);\n    console.error('Детали запроса:', {\n      url: API_URL,\n      data: newsData,\n      headers: config.headers\n    });\n    throw error;\n  }\n};\nexport const updateNews = async (id, newsData) => {\n  // Явно указываем заголовки для корректной обработки JSON\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  return axios.put(`${API_URL}/${id}`, newsData, config);\n};\nexport const deleteNews = async id => {\n  return axios.delete(`${API_URL}/${id}`);\n};\nexport const publishNews = async (id, shouldPublish = true) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  return axios.patch(`${API_URL}/${id}/publish`, {\n    published: shouldPublish\n  }, config);\n};\nexport const getLatestNews = async () => {\n  try {\n    const response = await axios.get('/api/news?published=true&limit=5');\n    return response.data || [];\n  } catch (error) {\n    console.error('Error fetching latest news:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_URL","getNews","showAll","response","get","data","error","console","createNews","newsData","log","config","headers","post","url","updateNews","id","put","deleteNews","delete","publishNews","shouldPublish","patch","published","getLatestNews"],"sources":["/Users/mac/Projects/nsrz-connect/frontend/src/api/newsApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/news';\n\nexport const getNews = async (showAll = false) => {\n  try {\n    const response = await axios.get(`${API_URL}${showAll ? '?all=true' : ''}`);\n    return response.data || [];\n  } catch (error) {\n    console.error('Error fetching news:', error);\n    return [];\n  }\n};\n\nexport const createNews = async (newsData) => {\n  console.log('createNews вызван с данными:', newsData);\n  \n  // Явно указываем заголовки для корректной обработки JSON\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  \n  try {\n    const response = await axios.post(API_URL, newsData, config);\n    console.log('Результат запроса:', response.data);\n    return response;\n  } catch (error) {\n    console.error('Ошибка создания новости в API:', error);\n    console.error('Детали запроса:', {\n      url: API_URL,\n      data: newsData,\n      headers: config.headers\n    });\n    throw error;\n  }\n};\n\nexport const updateNews = async (id, newsData) => {\n  // Явно указываем заголовки для корректной обработки JSON\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  \n  return axios.put(`${API_URL}/${id}`, newsData, config);\n};\n\nexport const deleteNews = async (id) => {\n  return axios.delete(`${API_URL}/${id}`);\n};\n\nexport const publishNews = async (id, shouldPublish = true) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  \n  return axios.patch(`${API_URL}/${id}/publish`, { published: shouldPublish }, config);\n};\n\nexport const getLatestNews = async () => {\n  try {\n    const response = await axios.get('/api/news?published=true&limit=5');\n    return response.data || [];\n  } catch (error) {\n    console.error('Error fetching latest news:', error);\n    return [];\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gCAAgC;AAEhD,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,OAAO,GAAG,KAAK,KAAK;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,OAAO,GAAGE,OAAO,GAAG,WAAW,GAAG,EAAE,EAAE,CAAC;IAC3E,OAAOC,QAAQ,CAACE,IAAI,IAAI,EAAE;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5CF,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAED,QAAQ,CAAC;;EAErD;EACA,MAAME,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAACb,OAAO,EAAES,QAAQ,EAAEE,MAAM,CAAC;IAC5DJ,OAAO,CAACG,GAAG,CAAC,oBAAoB,EAAEP,QAAQ,CAACE,IAAI,CAAC;IAChD,OAAOF,QAAQ;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtDC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAE;MAC/BQ,GAAG,EAAEd,OAAO;MACZK,IAAI,EAAEI,QAAQ;MACdG,OAAO,EAAED,MAAM,CAACC;IAClB,CAAC,CAAC;IACF,MAAMN,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAOC,EAAE,EAAEP,QAAQ,KAAK;EAChD;EACA,MAAME,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,OAAOb,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,IAAIgB,EAAE,EAAE,EAAEP,QAAQ,EAAEE,MAAM,CAAC;AACxD,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,MAAOF,EAAE,IAAK;EACtC,OAAOjB,KAAK,CAACoB,MAAM,CAAC,GAAGnB,OAAO,IAAIgB,EAAE,EAAE,CAAC;AACzC,CAAC;AAED,OAAO,MAAMI,WAAW,GAAG,MAAAA,CAAOJ,EAAE,EAAEK,aAAa,GAAG,IAAI,KAAK;EAC7D,MAAMV,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,OAAOb,KAAK,CAACuB,KAAK,CAAC,GAAGtB,OAAO,IAAIgB,EAAE,UAAU,EAAE;IAAEO,SAAS,EAAEF;EAAc,CAAC,EAAEV,MAAM,CAAC;AACtF,CAAC;AAED,OAAO,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMrB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,kCAAkC,CAAC;IACpE,OAAOD,QAAQ,CAACE,IAAI,IAAI,EAAE;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}