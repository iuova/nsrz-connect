{"ast":null,"code":"/**\n * Форматирует дату в локализованный формат для отображения\n * @param {Date} date - объект даты для форматирования\n * @param {boolean} includeTime - включать ли время в форматированную строку\n * @returns {string} - отформатированная строка даты\n */\nexport const formatDate = (date, includeTime = true) => {\n  if (!date) return 'Нет данных';\n  try {\n    // Проверяем, является ли дата допустимым объектом Date\n    if (isNaN(date.getTime())) return 'Некорректная дата';\n\n    // Настройки форматирования\n    const options = {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    };\n\n    // Добавляем время, если оно требуется\n    if (includeTime) {\n      options.hour = '2-digit';\n      options.minute = '2-digit';\n    }\n\n    // Форматируем дату с локализацией для России\n    return date.toLocaleDateString('ru-RU', options);\n  } catch (err) {\n    console.error('Ошибка форматирования даты:', err);\n    return 'Ошибка форматирования';\n  }\n};\n\n/**\n * Получает относительную строку времени (например, \"5 минут назад\")\n * @param {Date|string} date - дата для форматирования\n * @returns {string} - относительная строка времени\n */\nexport const getRelativeTime = date => {\n  if (!date) return '';\n  try {\n    const now = new Date();\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n\n    // Проверяем валидность даты\n    if (isNaN(dateObj.getTime())) return '';\n    const seconds = Math.floor((now - dateObj) / 1000);\n\n    // Меньше минуты\n    if (seconds < 60) return 'только что';\n\n    // Меньше часа\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) {\n      return `${minutes} ${getWordForm(minutes, ['минуту', 'минуты', 'минут'])} назад`;\n    }\n\n    // Меньше дня\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) {\n      return `${hours} ${getWordForm(hours, ['час', 'часа', 'часов'])} назад`;\n    }\n\n    // Меньше недели\n    const days = Math.floor(hours / 24);\n    if (days < 7) {\n      return `${days} ${getWordForm(days, ['день', 'дня', 'дней'])} назад`;\n    }\n\n    // Больше недели - возвращаем полную дату\n    return formatDate(dateObj);\n  } catch (err) {\n    console.error('Ошибка получения относительного времени:', err);\n    return '';\n  }\n};\n\n/**\n * Вспомогательная функция для выбора правильной формы слова в зависимости от числа\n * @param {number} number - число для проверки\n * @param {Array<string>} words - массив форм слова [для 1, для 2-4, для 5-9,0]\n * @returns {string} - правильная форма слова\n */\nconst getWordForm = (number, words) => {\n  const cases = [2, 0, 1, 1, 1, 2];\n  return words[number % 100 > 4 && number % 100 < 20 ? 2 : cases[Math.min(number % 10, 5)]];\n};","map":{"version":3,"names":["formatDate","date","includeTime","isNaN","getTime","options","day","month","year","hour","minute","toLocaleDateString","err","console","error","getRelativeTime","now","Date","dateObj","seconds","Math","floor","minutes","getWordForm","hours","days","number","words","cases","min"],"sources":["/Users/mac/Projects/nsrz-connect/frontend/src/utils/dateUtils.js"],"sourcesContent":["/**\n * Форматирует дату в локализованный формат для отображения\n * @param {Date} date - объект даты для форматирования\n * @param {boolean} includeTime - включать ли время в форматированную строку\n * @returns {string} - отформатированная строка даты\n */\nexport const formatDate = (date, includeTime = true) => {\n  if (!date) return 'Нет данных';\n  \n  try {\n    // Проверяем, является ли дата допустимым объектом Date\n    if (isNaN(date.getTime())) return 'Некорректная дата';\n    \n    // Настройки форматирования\n    const options = {\n      day: '2-digit', \n      month: '2-digit', \n      year: 'numeric'\n    };\n    \n    // Добавляем время, если оно требуется\n    if (includeTime) {\n      options.hour = '2-digit';\n      options.minute = '2-digit';\n    }\n    \n    // Форматируем дату с локализацией для России\n    return date.toLocaleDateString('ru-RU', options);\n  } catch (err) {\n    console.error('Ошибка форматирования даты:', err);\n    return 'Ошибка форматирования';\n  }\n};\n\n/**\n * Получает относительную строку времени (например, \"5 минут назад\")\n * @param {Date|string} date - дата для форматирования\n * @returns {string} - относительная строка времени\n */\nexport const getRelativeTime = (date) => {\n  if (!date) return '';\n  \n  try {\n    const now = new Date();\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    \n    // Проверяем валидность даты\n    if (isNaN(dateObj.getTime())) return '';\n    \n    const seconds = Math.floor((now - dateObj) / 1000);\n    \n    // Меньше минуты\n    if (seconds < 60) return 'только что';\n    \n    // Меньше часа\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) {\n      return `${minutes} ${getWordForm(minutes, ['минуту', 'минуты', 'минут'])} назад`;\n    }\n    \n    // Меньше дня\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) {\n      return `${hours} ${getWordForm(hours, ['час', 'часа', 'часов'])} назад`;\n    }\n    \n    // Меньше недели\n    const days = Math.floor(hours / 24);\n    if (days < 7) {\n      return `${days} ${getWordForm(days, ['день', 'дня', 'дней'])} назад`;\n    }\n    \n    // Больше недели - возвращаем полную дату\n    return formatDate(dateObj);\n  } catch (err) {\n    console.error('Ошибка получения относительного времени:', err);\n    return '';\n  }\n};\n\n/**\n * Вспомогательная функция для выбора правильной формы слова в зависимости от числа\n * @param {number} number - число для проверки\n * @param {Array<string>} words - массив форм слова [для 1, для 2-4, для 5-9,0]\n * @returns {string} - правильная форма слова\n */\nconst getWordForm = (number, words) => {\n  const cases = [2, 0, 1, 1, 1, 2];\n  return words[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[Math.min(number % 10, 5)]];\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}