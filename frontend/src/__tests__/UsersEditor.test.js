import React from 'react';
import { render, screen, fireEvent, waitFor, within } from '@testing-library/react';
import '@testing-library/jest-dom';
import UsersEditor from '../components/UsersEditor';
import { createUser, updateUser } from '../api/usersApi';
import { getDepartments } from '../api/departmentsApi';

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('../api/usersApi', () => ({
  createUser: jest.fn(),
  updateUser: jest.fn()
}));

jest.mock('../api/departmentsApi', () => ({
  getDepartments: jest.fn()
}));

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const logTestStep = (message) => {
  console.log('\nüìù ' + message);
};

describe('UsersEditor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', () => {
  // –¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const mockProps = {
    onSave: jest.fn(),
    onCancel: jest.fn()
  };

  const mockDepartments = [
    { id: 1, name: '–ò–¢ –æ—Ç–¥–µ–ª', fullname: '–û—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π' },
    { id: 2, name: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', fullname: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç–¥–µ–ª' }
  ];

  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏
  beforeAll(() => {
    console.log('\nüîç –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–ê USERSEDITOR');
    console.log('===========================================');
  });

  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  afterAll(() => {
    console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–ê USERSEDITOR –ó–ê–í–ï–†–®–ï–ù–û');
    console.log('=================================================');
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
  beforeEach(() => {
    jest.clearAllMocks();
    getDepartments.mockResolvedValue(mockDepartments);
    console.log('\n‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç');
  });

  afterEach(() => {
    console.log('‚èπÔ∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n');
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    logTestStep('–¢–µ—Å—Ç: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    logTestStep('–†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    render(<UsersEditor {...mockProps} />);
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫');
    expect(screen.getByText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–æ–∑–¥–∞–Ω–∏–µ)')).toBeInTheDocument();
    console.log('‚úì –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã');
    expect(screen.getByLabelText(/–§–∞–º–∏–ª–∏—è:/i)).toBeInTheDocument();
    console.log('‚úì –ü–æ–ª–µ "–§–∞–º–∏–ª–∏—è" –Ω–∞–π–¥–µ–Ω–æ');
    
    expect(screen.getByLabelText(/–ò–º—è:/i)).toBeInTheDocument();
    console.log('‚úì –ü–æ–ª–µ "–ò–º—è" –Ω–∞–π–¥–µ–Ω–æ');
    
    expect(screen.getByLabelText(/–û—Ç—á–µ—Å—Ç–≤–æ:/i)).toBeInTheDocument();
    console.log('‚úì –ü–æ–ª–µ "–û—Ç—á–µ—Å—Ç–≤–æ" –Ω–∞–π–¥–µ–Ω–æ');
    
    expect(screen.getByLabelText(/Email:/i)).toBeInTheDocument();
    console.log('‚úì –ü–æ–ª–µ "Email" –Ω–∞–π–¥–µ–Ω–æ');
    
    expect(screen.getByLabelText(/–ü–∞—Ä–æ–ª—å:/i)).toBeInTheDocument();
    console.log('‚úì –ü–æ–ª–µ "–ü–∞—Ä–æ–ª—å" –Ω–∞–π–¥–µ–Ω–æ');
    
    logTestStep('–ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤');
    await waitFor(() => {
      expect(getDepartments).toHaveBeenCalledTimes(1);
    });
    console.log('‚úì API getDepartments –±—ã–ª –≤—ã–∑–≤–∞–Ω');
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    logTestStep('–¢–µ—Å—Ç: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const existingUser = {
      id: 1,
      lastname: '–ò–≤–∞–Ω–æ–≤',
      firstname: '–ò–≤–∞–Ω',
      midlename: '–ò–≤–∞–Ω–æ–≤–∏—á',
      email: 'ivanov@example.com',
      role: 'user',
      status: 'active',
      department: '–ò–¢ –æ—Ç–¥–µ–ª'
    };
    
    logTestStep('–†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', JSON.stringify(existingUser, null, 2));
    render(<UsersEditor user={existingUser} {...mockProps} />);
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫');
    expect(screen.getByText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)')).toBeInTheDocument();
    console.log('‚úì –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    expect(screen.getByLabelText(/–§–∞–º–∏–ª–∏—è:/i)).toHaveValue('–ò–≤–∞–Ω–æ–≤');
    console.log('‚úì –ü–æ–ª–µ "–§–∞–º–∏–ª–∏—è" —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    
    expect(screen.getByLabelText(/–ò–º—è:/i)).toHaveValue('–ò–≤–∞–Ω');
    console.log('‚úì –ü–æ–ª–µ "–ò–º—è" —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    
    expect(screen.getByLabelText(/–û—Ç—á–µ—Å—Ç–≤–æ:/i)).toHaveValue('–ò–≤–∞–Ω–æ–≤–∏—á');
    console.log('‚úì –ü–æ–ª–µ "–û—Ç—á–µ—Å—Ç–≤–æ" —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    
    expect(screen.getByLabelText(/Email:/i)).toHaveValue('ivanov@example.com');
    console.log('‚úì –ü–æ–ª–µ "Email" —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
  });

  test('–≤—ã–∑—ã–≤–∞–µ—Ç createUser –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    logTestStep('–¢–µ—Å—Ç: –í—ã–∑–æ–≤ createUser –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    logTestStep('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    createUser.mockResolvedValue({ data: { success: true } });
    
    logTestStep('–†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    render(<UsersEditor {...mockProps} />);
    
    logTestStep('–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É');
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ "–§–∞–º–∏–ª–∏—è"');
    fireEvent.change(screen.getByLabelText(/–§–∞–º–∏–ª–∏—è:/i), { target: { value: '–ü–µ—Ç—Ä–æ–≤' } });
    
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ "–ò–º—è"');
    fireEvent.change(screen.getByLabelText(/–ò–º—è:/i), { target: { value: '–ü–µ—Ç—Ä' } });
    
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ "Email"');
    fireEvent.change(screen.getByLabelText(/Email:/i), { target: { value: 'petrov@example.com' } });
    
    console.log('–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ "–ü–∞—Ä–æ–ª—å"');
    fireEvent.change(screen.getByLabelText(/–ü–∞—Ä–æ–ª—å:/i), { target: { value: 'password123' } });
    
    logTestStep('–î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤');
    await waitFor(() => {
      expect(getDepartments).toHaveBeenCalledTimes(1);
    });
    console.log('‚úì API getDepartments –±—ã–ª –≤—ã–∑–≤–∞–Ω');
    
    logTestStep('–í—ã–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞');
    const departmentSelect = screen.getByLabelText(/–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:/i);
    fireEvent.change(departmentSelect, { target: { value: '–ò–¢ –æ—Ç–¥–µ–ª' } });
    
    logTestStep('–í—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å');
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
    const selects = screen.getAllByRole('combobox');
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${selects.length} –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤`);
    
    // –°–µ–ª–µ–∫—Ç —Ä–æ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Ç–æ—Ä—ã–º
    const roleSelect = selects[1];
    console.log('–í—ã–±–∏—Ä–∞–µ–º —Å–µ–ª–µ–∫—Ç —Ä–æ–ª–∏');
    fireEvent.change(roleSelect, { target: { value: 'user' } });
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏: user');
    
    logTestStep('–í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å');
    // –°–µ–ª–µ–∫—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç—Ä–µ—Ç—å–∏–º
    const statusSelect = selects[2];
    console.log('–í—ã–±–∏—Ä–∞–µ–º —Å–µ–ª–µ–∫—Ç —Å—Ç–∞—Ç—É—Å–∞');
    fireEvent.change(statusSelect, { target: { value: 'active' } });
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: active');
    
    logTestStep('–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"');
    fireEvent.click(screen.getByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'));
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createUser –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    await waitFor(() => {
      expect(createUser).toHaveBeenCalledTimes(1);
      console.log('‚úì createUser –±—ã–ª –≤—ã–∑–≤–∞–Ω 1 —Ä–∞–∑');
      
      expect(createUser).toHaveBeenCalledWith(expect.objectContaining({
        lastname: '–ü–µ—Ç—Ä–æ–≤',
        firstname: '–ü–µ—Ç—Ä',
        email: 'petrov@example.com',
        password: 'password123',
        department: '–ò–¢ –æ—Ç–¥–µ–ª',
        role: 'user',
        status: 'active'
      }));
      console.log('‚úì createUser –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      
      expect(mockProps.onSave).toHaveBeenCalledTimes(1);
      console.log('‚úì onSave –±—ã–ª –≤—ã–∑–≤–∞–Ω 1 —Ä–∞–∑');
    });
  });

  test('–≤—ã–∑—ã–≤–∞–µ—Ç updateUser –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    logTestStep('–¢–µ—Å—Ç: –í—ã–∑–æ–≤ updateUser –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    logTestStep('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    updateUser.mockResolvedValue({ data: { success: true } });
    
    const existingUser = {
      id: 1,
      lastname: '–ò–≤–∞–Ω–æ–≤',
      firstname: '–ò–≤–∞–Ω',
      midlename: '–ò–≤–∞–Ω–æ–≤–∏—á',
      email: 'ivanov@example.com',
      role: 'user',
      status: 'active',
      department: '–ò–¢ –æ—Ç–¥–µ–ª'
    };
    
    logTestStep('–†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', JSON.stringify(existingUser, null, 2));
    render(<UsersEditor user={existingUser} {...mockProps} />);
    
    logTestStep('–ò–∑–º–µ–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é');
    fireEvent.change(screen.getByLabelText(/–§–∞–º–∏–ª–∏—è:/i), { target: { value: '–°–∏–¥–æ—Ä–æ–≤' } });
    console.log('–ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è: –°–∏–¥–æ—Ä–æ–≤');
    
    logTestStep('–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"');
    fireEvent.click(screen.getByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'));
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ updateUser –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    await waitFor(() => {
      expect(updateUser).toHaveBeenCalledTimes(1);
      console.log('‚úì updateUser –±—ã–ª –≤—ã–∑–≤–∞–Ω 1 —Ä–∞–∑');
      
      expect(updateUser).toHaveBeenCalledWith(1, expect.objectContaining({
        lastname: '–°–∏–¥–æ—Ä–æ–≤',
        firstname: '–ò–≤–∞–Ω',
        midlename: '–ò–≤–∞–Ω–æ–≤–∏—á',
        email: 'ivanov@example.com'
      }));
      console.log('‚úì updateUser –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      
      expect(mockProps.onSave).toHaveBeenCalledTimes(1);
      console.log('‚úì onSave –±—ã–ª –≤—ã–∑–≤–∞–Ω 1 —Ä–∞–∑');
    });
  });

  test('–≤—ã–∑—ã–≤–∞–µ—Ç onCancel –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"', () => {
    logTestStep('–¢–µ—Å—Ç: –í—ã–∑–æ–≤ onCancel –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"');
    
    logTestStep('–†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    render(<UsersEditor {...mockProps} />);
    
    logTestStep('–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"');
    fireEvent.click(screen.getByText('–û—Ç–º–µ–Ω–∞'));
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ onCancel –±—ã–ª –≤—ã–∑–≤–∞–Ω');
    expect(mockProps.onCancel).toHaveBeenCalledTimes(1);
    console.log('‚úì onCancel –±—ã–ª –≤—ã–∑–≤–∞–Ω 1 —Ä–∞–∑');
  });

  test('–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É', () => {
    logTestStep('–¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É');
    
    logTestStep('–†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    render(<UsersEditor {...mockProps} />);
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è');
    const passwordInput = screen.getByLabelText(/–ü–∞—Ä–æ–ª—å:/i);
    expect(passwordInput).toHaveAttribute('type', 'password');
    console.log('‚úì –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ (type="password")');
    
    logTestStep('–ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏ –∫–ª–∏–∫–∞–µ–º');
    const toggleButton = screen.getByRole('button', { name: '' });
    fireEvent.click(toggleButton);
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è');
    
    logTestStep('–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –ø–æ–ª—è –∏–∑–º–µ–Ω–∏–ª—Å—è');
    expect(passwordInput).toHaveAttribute('type', 'text');
    console.log('‚úì –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è —Å—Ç–∞–ª–æ –≤–∏–¥–∏–º—ã–º (type="text")');
  });
}); 